{"version":3,"sources":["../src/index.js"],"names":["app","use","bodyParser","json","urlencoded","extended","req","res","next","context","models","me","User","findByLogin","query","token","routes","users","then","process","env","ERASE_DB_ON_SYNC_FOR","Promise","all","split","map","model","deleteMany","SEED_DB_WITH","listen","PORT","console","log"],"mappings":";;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;AAEA,MAAMA,GAAG,GAAG,uBAAZ;AACAA,GAAG,CAACC,GAAJ,CAAQ,oBAAR;AACAD,GAAG,CAACC,GAAJ,CAAQC,oBAAWC,IAAX,EAAR;AACAH,GAAG,CAACC,GAAJ,CAAQC,oBAAWE,UAAX,CAAsB;AAAEC,EAAAA,QAAQ,EAAE;AAAZ,CAAtB,CAAR;AACAL,GAAG,CAACC,GAAJ,CAAQ,OAAOK,GAAP,EAAYC,GAAZ,EAAiBC,IAAjB,KAA0B;AAChCF,EAAAA,GAAG,CAACG,OAAJ,GAAc;AACZC,IAAAA,MAAM,EAANA,eADY;AAEZC,IAAAA,EAAE,EAAE,MAAMD,gBAAOE,IAAP,CAAYC,WAAZ,CAAwBP,GAAG,CAACQ,KAAJ,CAAUC,KAAV,IAAmB,cAA3C;AAFE,GAAd;AAIAP,EAAAA,IAAI;AACL,CAND;AAQAR,GAAG,CAACC,GAAJ,CAAQ,QAAR,EAAkBe,gBAAOC,KAAzB;AAEA,yBAAYC,IAAZ,CAAiB,YAAY;AAC3B,MAAIC,OAAO,CAACC,GAAR,CAAYC,oBAAhB,EAAsC;AACpC,UAAMC,OAAO,CAACC,GAAR,CACJJ,OAAO,CAACC,GAAR,CAAYC,oBAAZ,CAAiCG,KAAjC,CAAuC,GAAvC,EAA4CC,GAA5C,CAAgDC,KAAK,IACnDhB,gBAAOgB,KAAP,EAAcC,UAAd,CAAyB,EAAzB,CADF,CADI,CAAN;AAKD;;AAED,MAAIR,OAAO,CAACC,GAAR,CAAYQ,YAAhB,EAA8B;AAC5BT,IAAAA,OAAO,CAACC,GAAR,CAAYQ,YAAZ,CAAyBJ,KAAzB,CAA+B,GAA/B,EAAoCC,GAApC,CAAwCC,KAAK,IAAI,2BAAgBA,KAAhB,CAAjD;AACD;;AACD1B,EAAAA,GAAG,CAAC6B,MAAJ,CAAWV,OAAO,CAACC,GAAR,CAAYU,IAAZ,IAAoB,IAA/B,EAAqC,MACnCC,OAAO,CAACC,GAAR,CAAa,iCAAgCb,OAAO,CAACC,GAAR,CAAYU,IAAK,KAA9D,CADF;AAGD,CAfD","sourcesContent":["import \"dotenv/config\";\nimport bodyParser from \"body-parser\";\nimport express from \"express\";\nimport cors from \"cors\";\nimport routes from \"./routes\";\nimport { createMockModel } from \"./mock\";\nimport models, { connectDb } from \"./models\";\n\nconst app = express();\napp.use(cors());\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({ extended: true }));\napp.use(async (req, res, next) => {\n  req.context = {\n    models,\n    me: await models.User.findByLogin(req.query.token || \"Unauthorized\")\n  };\n  next();\n});\n\napp.use(\"/users\", routes.users);\n\nconnectDb().then(async () => {\n  if (process.env.ERASE_DB_ON_SYNC_FOR) {\n    await Promise.all(\n      process.env.ERASE_DB_ON_SYNC_FOR.split(\",\").map(model =>\n        models[model].deleteMany({})\n      )\n    );\n  }\n\n  if (process.env.SEED_DB_WITH) {\n    process.env.SEED_DB_WITH.split(\",\").map(model => createMockModel(model));\n  }\n  app.listen(process.env.PORT || 3000, () =>\n    console.log(`Example app listening on port ${process.env.PORT}...`)\n  );\n});\n"],"file":"index.js"}